// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SAP_API.DataAccess.DbContexts;

namespace SAP_API.Migrations
{
    [DbContext(typeof(BakeryContext))]
    [Migration("20230417211645_AddCustomerFieldsToOrder")]
    partial class AddCustomerFieldsToOrder
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("SAP_API.Models.BakingProgram", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("BakingEndsAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("BakingProgrammedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("BakingStartedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("BakingTempInC")
                        .HasColumnType("integer");

                    b.Property<int>("BakingTimeInMins")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("PreparedByUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("RemainingOvenCapacity")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasAlternateKey("Code");

                    b.HasIndex("PreparedByUserId");

                    b.ToTable("BakingProgram");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            BakingProgrammedAt = new DateTime(2023, 4, 17, 23, 16, 42, 572, DateTimeKind.Local).AddTicks(5689),
                            BakingTempInC = 120,
                            BakingTimeInMins = 30,
                            Code = "Code1",
                            CreatedAt = new DateTime(2020, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            PreparedByUserId = new Guid("00000000-0000-0000-0000-000000000008"),
                            RemainingOvenCapacity = 10,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            BakingProgrammedAt = new DateTime(2023, 4, 17, 23, 16, 42, 572, DateTimeKind.Local).AddTicks(8855),
                            BakingTempInC = 140,
                            BakingTimeInMins = 30,
                            Code = "Code2",
                            CreatedAt = new DateTime(2020, 2, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            PreparedByUserId = new Guid("00000000-0000-0000-0000-000000000008"),
                            RemainingOvenCapacity = 10,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            BakingEndsAt = new DateTime(2023, 12, 2, 11, 17, 0, 0, DateTimeKind.Unspecified),
                            BakingProgrammedAt = new DateTime(2023, 4, 17, 23, 16, 42, 572, DateTimeKind.Local).AddTicks(8984),
                            BakingStartedAt = new DateTime(2023, 12, 2, 11, 5, 0, 0, DateTimeKind.Unspecified),
                            BakingTempInC = 190,
                            BakingTimeInMins = 12,
                            Code = "Code3",
                            CreatedAt = new DateTime(2020, 3, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            PreparedByUserId = new Guid("00000000-0000-0000-0000-000000000008"),
                            RemainingOvenCapacity = 10,
                            Status = 5
                        });
                });

            modelBuilder.Entity("SAP_API.Models.BakingProgramProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BakingProgramId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("QuantityТoBake")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BakingProgramId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("BakingProgramProduct");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            BakingProgramId = new Guid("00000000-0000-0000-0000-000000000008"),
                            OrderId = new Guid("00000000-0000-0000-0000-000000000008"),
                            ProductId = new Guid("00000000-0000-0000-0000-000000000008"),
                            QuantityТoBake = 5
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            BakingProgramId = new Guid("00000000-0000-0000-0000-000000000008"),
                            OrderId = new Guid("00000000-0000-0000-0000-000000000008"),
                            ProductId = new Guid("00000000-0000-0000-0000-000000000008"),
                            QuantityТoBake = 5
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            BakingProgramId = new Guid("00000000-0000-0000-0000-000000000001"),
                            OrderId = new Guid("00000000-0000-0000-0000-000000000008"),
                            ProductId = new Guid("00000000-0000-0000-0000-000000000008"),
                            QuantityТoBake = 5
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            BakingProgramId = new Guid("00000000-0000-0000-0000-000000000001"),
                            OrderId = new Guid("00000000-0000-0000-0000-000000000008"),
                            ProductId = new Guid("00000000-0000-0000-0000-000000000002"),
                            QuantityТoBake = 5
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            BakingProgramId = new Guid("00000000-0000-0000-0000-000000000001"),
                            OrderId = new Guid("00000000-0000-0000-0000-000000000008"),
                            ProductId = new Guid("00000000-0000-0000-0000-000000000002"),
                            QuantityТoBake = 5
                        });
                });

            modelBuilder.Entity("SAP_API.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CustomerEmail")
                        .HasColumnType("text");

                    b.Property<string>("CustomerFullName")
                        .HasColumnType("text");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<string>("CustomerTelephone")
                        .HasColumnType("text");

                    b.Property<DateTime>("ShouldBeDoneAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Order");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            CustomerEmail = "janesmith@example.com",
                            CustomerFullName = "Jane Smith",
                            CustomerId = new Guid("00000000-0000-0000-0000-000000000000"),
                            CustomerTelephone = "+44 20 5555 5555",
                            ShouldBeDoneAt = new DateTime(2023, 4, 17, 23, 16, 42, 559, DateTimeKind.Local).AddTicks(797),
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            CustomerEmail = "janesmith@example.com",
                            CustomerFullName = "Jane Smith",
                            CustomerId = new Guid("00000000-0000-0000-0000-000000000000"),
                            CustomerTelephone = "+44 20 5555 5555",
                            ShouldBeDoneAt = new DateTime(2023, 4, 18, 23, 16, 42, 568, DateTimeKind.Local).AddTicks(766),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            CustomerEmail = "janesmith@example.com",
                            CustomerFullName = "Jane Smith",
                            CustomerId = new Guid("00000000-0000-0000-0000-000000000000"),
                            CustomerTelephone = "+44 20 5555 5555",
                            ShouldBeDoneAt = new DateTime(2023, 4, 19, 23, 16, 42, 568, DateTimeKind.Local).AddTicks(1055),
                            Status = 1
                        });
                });

            modelBuilder.Entity("SAP_API.Models.Oven", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BakingProgramId")
                        .HasColumnType("uuid");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MaxTempInC")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasAlternateKey("Code");

                    b.HasIndex("BakingProgramId")
                        .IsUnique();

                    b.ToTable("Oven");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            BakingProgramId = new Guid("00000000-0000-0000-0000-000000000008"),
                            Capacity = 20,
                            Code = "Oven1",
                            MaxTempInC = 250
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            BakingProgramId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Capacity = 25,
                            Code = "Oven2",
                            MaxTempInC = 300
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            BakingProgramId = new Guid("00000000-0000-0000-0000-000000000002"),
                            Capacity = 30,
                            Code = "Oven3",
                            MaxTempInC = 350
                        });
                });

            modelBuilder.Entity("SAP_API.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BakingTempInC")
                        .HasColumnType("integer");

                    b.Property<int>("BakingTimeInMins")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Size")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            BakingTempInC = 120,
                            BakingTimeInMins = 30,
                            Name = "Chocolate Croissant",
                            Size = 2
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            BakingTempInC = 140,
                            BakingTimeInMins = 30,
                            Name = "Vanilla Croissant",
                            Size = 1
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            BakingTempInC = 120,
                            BakingTimeInMins = 30,
                            Name = "Pizza",
                            Size = 6
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            BakingTempInC = 200,
                            BakingTimeInMins = 45,
                            Name = "Bagguete",
                            Size = 6
                        });
                });

            modelBuilder.Entity("SAP_API.Models.ProductToPrepare", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BakingProgramId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("QuantityToPrepare")
                        .HasColumnType("integer");

                    b.Property<Guid>("StockLocationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BakingProgramId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("StockLocationId");

                    b.ToTable("ProductToPrepare");
                });

            modelBuilder.Entity("SAP_API.Models.ReservedOrderProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("PreparedQuantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("ReservedQuantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("StockLocationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("StockLocationId");

                    b.ToTable("ReservedOrderProduct");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            OrderId = new Guid("00000000-0000-0000-0000-000000000008"),
                            PreparedQuantity = 0,
                            ProductId = new Guid("00000000-0000-0000-0000-000000000008"),
                            ReservedQuantity = 5,
                            StockLocationId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            OrderId = new Guid("00000000-0000-0000-0000-000000000008"),
                            PreparedQuantity = 0,
                            ProductId = new Guid("00000000-0000-0000-0000-000000000008"),
                            ReservedQuantity = 5,
                            StockLocationId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            OrderId = new Guid("00000000-0000-0000-0000-000000000008"),
                            PreparedQuantity = 0,
                            ProductId = new Guid("00000000-0000-0000-0000-000000000008"),
                            ReservedQuantity = 5,
                            StockLocationId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            OrderId = new Guid("00000000-0000-0000-0000-000000000008"),
                            PreparedQuantity = 0,
                            ProductId = new Guid("00000000-0000-0000-0000-000000000002"),
                            ReservedQuantity = 5,
                            StockLocationId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            OrderId = new Guid("00000000-0000-0000-0000-000000000008"),
                            PreparedQuantity = 0,
                            ProductId = new Guid("00000000-0000-0000-0000-000000000002"),
                            ReservedQuantity = 5,
                            StockLocationId = new Guid("00000000-0000-0000-0000-000000000001")
                        });
                });

            modelBuilder.Entity("SAP_API.Models.StockLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasAlternateKey("Code");

                    b.ToTable("StockLocation");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Capacity = 200,
                            Code = "L1"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Capacity = 100,
                            Code = "L2"
                        });
                });

            modelBuilder.Entity("SAP_API.Models.StockedProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("ReservedQuantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProductId");

                    b.ToTable("StockedProduct");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            LocationId = new Guid("00000000-0000-0000-0000-000000000002"),
                            ProductId = new Guid("00000000-0000-0000-0000-000000000008"),
                            Quantity = 20,
                            ReservedQuantity = 10
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            LocationId = new Guid("00000000-0000-0000-0000-000000000002"),
                            ProductId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Quantity = 20,
                            ReservedQuantity = 10
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            LocationId = new Guid("00000000-0000-0000-0000-000000000001"),
                            ProductId = new Guid("00000000-0000-0000-0000-000000000008"),
                            Quantity = 300,
                            ReservedQuantity = 10
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            LocationId = new Guid("00000000-0000-0000-0000-000000000001"),
                            ProductId = new Guid("00000000-0000-0000-0000-000000000002"),
                            Quantity = 20,
                            ReservedQuantity = 10
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            LocationId = new Guid("00000000-0000-0000-0000-000000000001"),
                            ProductId = new Guid("00000000-0000-0000-0000-000000000002"),
                            Quantity = 200,
                            ReservedQuantity = 10
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            LocationId = new Guid("00000000-0000-0000-0000-000000000002"),
                            ProductId = new Guid("00000000-0000-0000-0000-000000000003"),
                            Quantity = 20,
                            ReservedQuantity = 10
                        });
                });

            modelBuilder.Entity("SAP_API.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            Password = "12ik12k0",
                            Username = "username"
                        });
                });

            modelBuilder.Entity("SAP_API.Models.BakingProgram", b =>
                {
                    b.HasOne("SAP_API.Models.User", "PreparedByUser")
                        .WithMany("BakingProgramsMade")
                        .HasForeignKey("PreparedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PreparedByUser");
                });

            modelBuilder.Entity("SAP_API.Models.BakingProgramProduct", b =>
                {
                    b.HasOne("SAP_API.Models.BakingProgram", "BakingProgram")
                        .WithMany("Products")
                        .HasForeignKey("BakingProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAP_API.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAP_API.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BakingProgram");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SAP_API.Models.Oven", b =>
                {
                    b.HasOne("SAP_API.Models.BakingProgram", "BakingProgram")
                        .WithOne("Oven")
                        .HasForeignKey("SAP_API.Models.Oven", "BakingProgramId");

                    b.Navigation("BakingProgram");
                });

            modelBuilder.Entity("SAP_API.Models.ProductToPrepare", b =>
                {
                    b.HasOne("SAP_API.Models.BakingProgram", "BakingProgram")
                        .WithMany()
                        .HasForeignKey("BakingProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAP_API.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAP_API.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAP_API.Models.StockLocation", "LocationToPrepareFrom")
                        .WithMany()
                        .HasForeignKey("StockLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BakingProgram");

                    b.Navigation("LocationToPrepareFrom");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SAP_API.Models.ReservedOrderProduct", b =>
                {
                    b.HasOne("SAP_API.Models.Order", "Order")
                        .WithMany("Products")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAP_API.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAP_API.Models.StockLocation", "LocationWhereProductIsReserved")
                        .WithMany()
                        .HasForeignKey("StockLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LocationWhereProductIsReserved");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SAP_API.Models.StockedProduct", b =>
                {
                    b.HasOne("SAP_API.Models.StockLocation", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAP_API.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SAP_API.Models.BakingProgram", b =>
                {
                    b.Navigation("Oven");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("SAP_API.Models.Order", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("SAP_API.Models.User", b =>
                {
                    b.Navigation("BakingProgramsMade");
                });
#pragma warning restore 612, 618
        }
    }
}
